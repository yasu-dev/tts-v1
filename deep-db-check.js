const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function deepDatabaseCheck() {
  try {
    console.log('üîç „Éá„Éº„Çø„Éô„Éº„ÇπÊßãÈÄ†„ÅÆÂæπÂ∫ïË™øÊüª„ÇíÈñãÂßã...');

    // 1. ÂÖ®„ÉÜ„Éº„Éñ„É´„ÅÆ‰ª∂Êï∞Á¢∫Ë™ç
    const tables = [
      'User', 'Order', 'OrderItem', 'Shipment', 
      'Product', 'Location', 'InventoryMovement',
      'Activity', 'DeliveryPlan', 'PickingTask'
    ];

    for (const table of tables) {
      try {
        const count = await prisma[table.toLowerCase()].count();
        console.log(`üìä ${table}: ${count}‰ª∂`);
      } catch (e) {
        console.log(`‚ùå ${table}: „Ç®„É©„Éº - ${e.message}`);
      }
    }

    // 2. Shipment„ÉÜ„Éº„Éñ„É´„ÅÆË©≥Á¥∞Á¢∫Ë™ç
    console.log('\nüöö Shipment„ÉÜ„Éº„Éñ„É´Ë©≥Á¥∞:');
    const shipments = await prisma.shipment.findMany({
      take: 3,
      include: {
        order: {
          include: {
            customer: true
          }
        }
      }
    });

    if (shipments.length > 0) {
      console.log('üì¶ Shipment„Éá„Éº„Çø„Çµ„É≥„Éó„É´:');
      shipments.forEach((ship, index) => {
        console.log(`${index + 1}. ID: ${ship.id}`);
        console.log(`   OrderID: ${ship.orderId}`);
        console.log(`   Customer: ${ship.customerName}`);
        console.log(`   Carrier: ${ship.carrier}`);
        console.log(`   Status: ${ship.status}`);
        console.log(`   Created: ${ship.createdAt}`);
        console.log(`   Order exists: ${ship.order ? 'Yes' : 'No'}`);
        if (ship.order?.customer) {
          console.log(`   Customer from Order: ${ship.order.customer.username}`);
        }
        console.log('---');
      });
    } else {
      console.log('‚ùå Shipment„ÉÜ„Éº„Éñ„É´„ÅØÁ©∫„Åß„Åô');
    }

    // 3. Order„ÉÜ„Éº„Éñ„É´„ÅÆË©≥Á¥∞Á¢∫Ë™ç
    console.log('\nüìã Order„ÉÜ„Éº„Éñ„É´Ë©≥Á¥∞:');
    const orders = await prisma.order.findMany({
      take: 3,
      include: {
        customer: true,
        items: {
          include: {
            product: true
          }
        },
        shipments: true
      }
    });

    if (orders.length > 0) {
      console.log('üìã Order„Éá„Éº„Çø„Çµ„É≥„Éó„É´:');
      orders.forEach((order, index) => {
        console.log(`${index + 1}. OrderNumber: ${order.orderNumber}`);
        console.log(`   Customer: ${order.customer.username}`);
        console.log(`   Status: ${order.status}`);
        console.log(`   Items: ${order.items.length}‰ª∂`);
        console.log(`   Shipments: ${order.shipments.length}‰ª∂`);
        console.log(`   Created: ${order.createdAt}`);
        console.log('---');
      });
    } else {
      console.log('‚ùå Order„ÉÜ„Éº„Éñ„É´„ÅØÁ©∫„Åß„Åô');
    }

    // 4. „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
    console.log('\nüîç „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ:');
    const ordersWithoutShipments = await prisma.order.findMany({
      where: {
        shipments: {
          none: {}
        },
        status: {
          in: ['confirmed', 'processing', 'shipped']
        }
      }
    });
    
    console.log(`üìã Âá∫Ëç∑„Éá„Éº„Çø„ÅåÁÑ°„ÅÑÊ≥®Êñá: ${ordersWithoutShipments.length}‰ª∂`);

    if (ordersWithoutShipments.length > 0) {
      console.log('Âá∫Ëç∑„Éá„Éº„Çø„ÅåÁÑ°„ÅÑÊ≥®Êñá„ÅÆ„Çµ„É≥„Éó„É´:');
      ordersWithoutShipments.slice(0, 3).forEach((order, index) => {
        console.log(`${index + 1}. ${order.orderNumber} - ${order.status}`);
      });
    }

    // 5. „Çπ„Ç≠„Éº„Éû„ÉÅ„Çß„ÉÉ„ÇØÔºàShipment„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†Ôºâ
    console.log('\nüèóÔ∏è Shipment„ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü');
    
    // 6. ÊúÄÊñ∞„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
    console.log('\nüìã ÊúÄÊñ∞„ÅÆActivity:');
    const activities = await prisma.activity.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true
      }
    });

    activities.forEach((activity, index) => {
      console.log(`${index + 1}. ${activity.type}: ${activity.description}`);
      console.log(`   User: ${activity.user?.username || 'Unknown'}`);
      console.log(`   Date: ${activity.createdAt}`);
      console.log('---');
    });

  } catch (error) {
    console.error('‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπË™øÊüª„Ç®„É©„Éº:', error);
    console.error('Ë©≥Á¥∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

deepDatabaseCheck();
