generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                   String            @id @default(cuid())
  email                String            @unique
  username             String            @unique
  password             String
  role                 String            @default("seller")
  fullName             String?
  phoneNumber          String?
  address              String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  notificationSettings String?
  activities           Activity[]
  deliveryPlans        DeliveryPlan[]
  externalServices     ExternalService[]
  orders               Order[]
  products             Product[]
  sessions             Session[]
  twoFactorAuth        TwoFactorAuth[]
  videoRecords         VideoRecord[]     @relation("VideoStaff")

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id                  String               @id @default(cuid())
  name                String
  sku                 String               @unique
  category            String
  status              String               @default("inbound")
  price               Int
  condition           String
  description         String?
  imageUrl            String?
  entryDate           DateTime             @default(now())
  sellerId            String
  inspectedAt         DateTime?
  inspectedBy         String?
  inspectionNotes     String?
  metadata            String?
  currentLocationId   String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  activities          Activity[]
  inspectionChecklist InspectionChecklist?
  movements           InventoryMovement[]
  listings            Listing[]
  orderItems          OrderItem[]
  images              ProductImage[]
  seller              User                 @relation(fields: [sellerId], references: [id])
  currentLocation     Location?            @relation(fields: [currentLocationId], references: [id])
  videoRecords        VideoRecord[]

  @@map("products")
}

model Location {
  id              String              @id @default(cuid())
  code            String              @unique
  name            String
  zone            String
  capacity        Int?
  isActive        Boolean             @default(true)
  address         String?
  phone           String?
  email           String?
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  barcodeScanners BarcodeScanner[]
  movementsFrom   InventoryMovement[] @relation("MovementFrom")
  movementsTo     InventoryMovement[] @relation("MovementTo")
  products        Product[]

  @@map("locations")
}

model InventoryMovement {
  id             String    @id @default(cuid())
  productId      String
  fromLocationId String?
  toLocationId   String?
  movedBy        String
  notes          String?
  createdAt      DateTime  @default(now())
  product        Product   @relation(fields: [productId], references: [id])
  fromLocation   Location? @relation("MovementFrom", fields: [fromLocationId], references: [id])
  toLocation     Location? @relation("MovementTo", fields: [toLocationId], references: [id])

  @@map("inventory_movements")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  customerId      String
  status          String        @default("pending")
  totalAmount     Int
  shippingAddress String?
  paymentMethod   String?
  notes           String?
  orderDate       DateTime      @default(now())
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  carrier         String?
  trackingNumber  String?
  activities      Activity[]
  items           OrderItem[]
  customer        User          @relation(fields: [customerId], references: [id])
  videoRecords    VideoRecord[]
  shipments       Shipment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  userId      String?
  productId   String?
  orderId     String?
  metadata    String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])

  @@map("activities")
}

model VideoRecord {
  id          String   @id @default(cuid())
  productId   String?
  orderId     String?
  type        String
  sessionId   String?
  timestamps  String?
  s3VideoPath String?
  staffId     String
  notes       String?
  createdAt   DateTime @default(now())
  product     Product? @relation(fields: [productId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])
  staff       User     @relation("VideoStaff", fields: [staffId], references: [id])

  @@map("video_records")
}

model TwoFactorAuth {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

model ExternalService {
  id           String   @id @default(cuid())
  service      String
  type         String
  endpoint     String
  method       String
  requestBody  String?
  response     String?
  status       String
  errorMessage String?
  userId       String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@map("external_services")
}

model BarcodeScanner {
  id         String    @id @default(cuid())
  locationId String
  deviceName String
  ipAddress  String?
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location  @relation(fields: [locationId], references: [id])

  @@map("barcode_scanners")
}

model PickingTask {
  id             String        @id @default(cuid())
  orderId        String        @unique
  customerName   String
  priority       String
  status         String
  assignee       String?
  shippingMethod String
  totalItems     Int
  pickedItems    Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  dueDate        DateTime
  items          PickingItem[]

  @@map("picking_tasks")
}

model PickingItem {
  id             String      @id @default(cuid())
  pickingTaskId  String
  productId      String
  productName    String
  sku            String
  location       String
  quantity       Int
  pickedQuantity Int         @default(0)
  status         String
  imageUrl       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  pickingTask    PickingTask @relation(fields: [pickingTaskId], references: [id], onDelete: Cascade)

  @@map("picking_items")
}

model DeliveryPlan {
  id                     String                @id @default(cuid())
  planNumber             String                @unique
  sellerId               String
  sellerName             String
  status                 String
  deliveryAddress        String
  contactEmail           String
  phoneNumber            String?
  notes                  String?
  totalItems             Int                   @default(0)
  totalValue             Int                   @default(0)
  shippingTrackingNumber String?
  shippedAt              DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  products               DeliveryPlanProduct[]
  seller                 User                  @relation(fields: [sellerId], references: [id])

  @@map("delivery_plans")
}

model DeliveryPlanProduct {
  id                  String                     @id @default(cuid())
  deliveryPlanId      String
  name                String
  category            String
  estimatedValue      Int
  description         String?
  photographyRequests String?                    // 撮影要望データをJSONで保存
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  images              DeliveryPlanProductImage[]
  deliveryPlan        DeliveryPlan               @relation(fields: [deliveryPlanId], references: [id], onDelete: Cascade)
  inspectionChecklist InspectionChecklist?

  @@map("delivery_plan_products")
}

model DeliveryPlanProductImage {
  id                    String              @id @default(cuid())
  deliveryPlanProductId String
  url                   String
  thumbnailUrl          String?
  filename              String
  size                  Int
  mimeType              String
  category              String?
  description           String?
  sortOrder             Int                 @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  deliveryPlanProduct   DeliveryPlanProduct @relation(fields: [deliveryPlanProductId], references: [id], onDelete: Cascade)

  @@map("delivery_plan_product_images")
}

model InspectionProgress {
  id          String   @id @default(cuid())
  productId   String   @unique
  currentStep Int
  checklist   String?
  photos      String?
  photoSlots  String?  // 写真の配置情報
  notes       String?
  videoId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("inspection_progress")
}

model InspectionChecklist {
  id                    String               @id @default(cuid())
  productId             String?              @unique
  deliveryPlanProductId String?              @unique
  hasScratches          Boolean              @default(false)
  hasDents              Boolean              @default(false)
  hasDiscoloration      Boolean              @default(false)
  hasDust               Boolean              @default(false)
  powerOn               Boolean              @default(false)
  allButtonsWork        Boolean              @default(false)
  screenDisplay         Boolean              @default(false)
  connectivity          Boolean              @default(false)
  lensClarity           Boolean              @default(false)
  aperture              Boolean              @default(false)
  focusAccuracy         Boolean              @default(false)
  stabilization         Boolean              @default(false)
  createdBy             String
  createdAt             DateTime             @default(now())
  verifiedBy            String?
  verifiedAt            DateTime?
  updatedBy             String?
  updatedAt             DateTime             @updatedAt
  notes                 String?
  product               Product?             @relation(fields: [productId], references: [id])
  deliveryPlanProduct   DeliveryPlanProduct? @relation(fields: [deliveryPlanProductId], references: [id])

  @@map("inspection_checklists")
}

model Warehouse {
  id            String   @id @default(cuid())
  name          String
  address       String
  contactPerson String
  phoneNumber   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("warehouses")
}

model ListingTemplate {
  id             String   @id @default(cuid())
  name           String
  category       String
  platform       String
  basePrice      Int
  currency       String   @default("JPY")
  condition      String
  shippingMethod String
  isActive       Boolean  @default(true)
  appliedCount   Int      @default(0)
  fields         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("listing_templates")
}

model Listing {
  id          String    @id @default(cuid())
  productId   String
  templateId  String?
  platform    String
  listingId   String?
  title       String
  description String?
  price       Int
  status      String    @default("draft")
  listedAt    DateTime?
  soldAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])

  @@map("listings")
}

model Shipment {
  id             String    @id @default(cuid())
  orderId        String
  productId      String?
  trackingNumber String?
  carrier        String
  method         String
  status         String    @default("pending")
  priority       String    @default("normal")
  customerName   String
  address        String
  deadline       DateTime?
  value          Int
  notes          String?
  pickedAt       DateTime?
  packedAt       DateTime?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  order          Order     @relation(fields: [orderId], references: [id])

  @@map("shipments")
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  category      String
  priority      String    @default("normal")
  status        String    @default("pending")
  assignedTo    String?
  estimatedTime String?
  dueDate       DateTime?
  completedAt   DateTime?
  notes         String?
  metadata      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("tasks")
}

model KPIMetric {
  id        String   @id @default(cuid())
  name      String
  category  String
  value     Float
  unit      String?
  period    String
  date      DateTime
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kpi_metrics")
}

model Return {
  id           String    @id @default(cuid())
  orderId      String
  productId    String
  reason       String
  condition    String
  customerNote String?
  staffNote    String?
  refundAmount Int
  status       String    @default("pending")
  processedBy  String?
  processedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("returns")
}

model ProductImage {
  id           String   @id @default(cuid())
  productId    String
  url          String
  thumbnailUrl String?
  filename     String
  size         Int
  mimeType     String
  category     String?
  description  String?
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Category {
  id          String   @id @default(cuid())
  key         String   @unique
  nameJa      String
  nameEn      String
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model ProductStatus {
  id          String   @id @default(cuid())
  key         String   @unique
  nameJa      String
  nameEn      String
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_statuses")
}

model ProductCondition {
  id          String   @id @default(cuid())
  key         String   @unique
  nameJa      String
  nameEn      String
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_conditions")
}

model Carrier {
  id                String   @id @default(cuid())
  key               String   @unique
  name              String
  nameJa            String?
  defaultRate       Int      @default(0)
  trackingUrl       String?
  supportedServices String?
  isActive          Boolean  @default(true)
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("carriers")
}

model WorkflowStep {
  id           String   @id @default(cuid())
  workflowType String
  key          String
  nameJa       String
  nameEn       String
  order        Int
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([workflowType, key])
  @@map("workflow_steps")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  type        String   @default("string")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}
