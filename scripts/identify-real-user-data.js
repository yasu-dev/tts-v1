const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function identifyRealUserData() {
  try {
    console.log('=== Áúü„ÅÆ„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÁâπÂÆöË™øÊüª ===\n');

    // 1. „Éá„É¢„Éë„Çø„Éº„É≥„ÇíÁâπÂÆö
    const demoUserEmails = [
      'demo-seller@example.com',
      'seller@example.com',
      'staff@example.com',
      'admin@example.com',
      'demo@example.com'
    ];

    const demoEmailPatterns = ['@example.com', '@test.com', '@system.local'];
    const demoNamePatterns = ['„Éá„É¢', '„ÉÜ„Çπ„Éà', 'demo', 'test', 'temp', 'Áî∞‰∏≠', 'Â§™ÈÉé', 'Ëä±Â≠ê'];

    console.log('üîç „Éá„É¢„Éë„Çø„Éº„É≥„ÇíÈô§Â§ñ„Åó„Å¶„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÇíÁâπÂÆö‰∏≠...\n');

    // 2. „É¶„Éº„Ç∂„ÉºÂàÜÊûê
    console.log('üë• „É¶„Éº„Ç∂„ÉºÂàÜÊûê:');
    const allUsers = await prisma.user.findMany({
      orderBy: { createdAt: 'asc' }
    });

    const realUsers = allUsers.filter(user => {
      // „Éá„É¢„É°„Éº„É´„Éë„Çø„Éº„É≥„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const isDemo = demoEmailPatterns.some(pattern => user.email.includes(pattern));
      const isDemoName = demoNamePatterns.some(pattern =>
        (user.username || '').includes(pattern) ||
        (user.fullName || '').includes(pattern)
      );

      return !isDemo && !isDemoName;
    });

    console.log(`   ÂÖ®„É¶„Éº„Ç∂„Éº: ${allUsers.length}‰ª∂`);
    console.log(`   „Éá„É¢„É¶„Éº„Ç∂„Éº: ${allUsers.length - realUsers.length}‰ª∂`);
    console.log(`   Áúü„ÅÆ„É¶„Éº„Ç∂„Éº: ${realUsers.length}‰ª∂`);

    if (realUsers.length > 0) {
      console.log('   Áúü„ÅÆ„É¶„Éº„Ç∂„Éº‰∏ÄË¶ß:');
      realUsers.forEach(user => {
        console.log(`     - ${user.email} (${user.username || 'No name'}) - Created: ${user.createdAt}`);
      });
    }
    console.log('');

    // 3. ÂïÜÂìÅÂàÜÊûê
    console.log('üì¶ ÂïÜÂìÅ„Éá„Éº„ÇøÂàÜÊûê:');
    const allProducts = await prisma.product.findMany({
      include: {
        seller: { select: { email: true, username: true } }
      }
    });

    const realUserIds = realUsers.map(u => u.id);
    const realProducts = allProducts.filter(p => realUserIds.includes(p.sellerId));

    console.log(`   ÂÖ®ÂïÜÂìÅ: ${allProducts.length}‰ª∂`);
    console.log(`   „Éá„É¢ÂïÜÂìÅ: ${allProducts.length - realProducts.length}‰ª∂`);
    console.log(`   Áúü„ÅÆ„É¶„Éº„Ç∂„ÉºÂïÜÂìÅ: ${realProducts.length}‰ª∂`);

    if (realProducts.length > 0) {
      console.log('   Áúü„ÅÆ„É¶„Éº„Ç∂„ÉºÂïÜÂìÅ‰∏ÄË¶ß:');
      realProducts.forEach(product => {
        console.log(`     - ${product.name} (${product.seller?.email}) - Created: ${product.createdAt}`);
      });
    }
    console.log('');

    // 4. Á¥çÂìÅ„Éó„É©„É≥ÂàÜÊûê
    console.log('üìã Á¥çÂìÅ„Éó„É©„É≥ÂàÜÊûê:');
    const allPlans = await prisma.deliveryPlan.findMany({
      orderBy: { createdAt: 'asc' }
    });

    const realPlans = allPlans.filter(plan => {
      // „Éá„É¢„Éë„Çø„Éº„É≥„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const isDemoName = demoNamePatterns.some(pattern =>
        (plan.sellerName || '').includes(pattern)
      );

      return realUserIds.includes(plan.sellerId) && !isDemoName;
    });

    console.log(`   ÂÖ®Á¥çÂìÅ„Éó„É©„É≥: ${allPlans.length}‰ª∂`);
    console.log(`   „Éá„É¢Á¥çÂìÅ„Éó„É©„É≥: ${allPlans.length - realPlans.length}‰ª∂`);
    console.log(`   Áúü„ÅÆ„É¶„Éº„Ç∂„ÉºÁ¥çÂìÅ„Éó„É©„É≥: ${realPlans.length}‰ª∂`);

    if (realPlans.length > 0) {
      console.log('   Áúü„ÅÆ„É¶„Éº„Ç∂„ÉºÁ¥çÂìÅ„Éó„É©„É≥‰∏ÄË¶ß:');
      realPlans.slice(0, 5).forEach(plan => {
        console.log(`     - ${plan.id} by ${plan.sellerName} - Status: ${plan.status} - Created: ${plan.createdAt}`);
      });
      if (realPlans.length > 5) {
        console.log(`     ... ‰ªñ${realPlans.length - 5}‰ª∂`);
      }
    }
    console.log('');

    // 5. ÊôÇÁ≥ªÂàóÂàÜÊûêÔºàÊúÄËøë‰ΩúÊàê„Åï„Çå„Åü„Éá„Éº„ÇøÔºâ
    console.log('‚è∞ ÊúÄËøë‰ΩúÊàê„Åï„Çå„Åü„Éá„Éº„ÇøÔºàÈÅéÂéª7Êó•Ôºâ:');
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);

    const recentUsers = await prisma.user.count({
      where: { createdAt: { gte: weekAgo } }
    });

    const recentProducts = await prisma.product.count({
      where: { createdAt: { gte: weekAgo } }
    });

    const recentPlans = await prisma.deliveryPlan.count({
      where: { createdAt: { gte: weekAgo } }
    });

    console.log(`   „É¶„Éº„Ç∂„Éº: ${recentUsers}‰ª∂`);
    console.log(`   ÂïÜÂìÅ: ${recentProducts}‰ª∂`);
    console.log(`   Á¥çÂìÅ„Éó„É©„É≥: ${recentPlans}‰ª∂`);

    // 6. ÂâäÈô§„Åô„Åπ„Åç„Éá„É¢„É¶„Éº„Ç∂„Éº„ÅÆÁâπÂÆö
    console.log('\nüéØ ÂâäÈô§ÂØæË±°„Éá„É¢„É¶„Éº„Ç∂„Éº:');
    const demoUsers = allUsers.filter(user => {
      const isDemo = demoEmailPatterns.some(pattern => user.email.includes(pattern));
      const isDemoName = demoNamePatterns.some(pattern =>
        (user.username || '').includes(pattern) ||
        (user.fullName || '').includes(pattern)
      );

      return isDemo || isDemoName;
    });

    demoUsers.forEach(user => {
      console.log(`   - ${user.email} (${user.username || 'No name'}) - ID: ${user.id}`);
    });

    console.log(`\nüìä Ë¶ÅÁ¥Ñ:`);
    console.log(`   ‰øùË≠∑„Åô„Åπ„ÅçÁúü„ÅÆ„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø:`);
    console.log(`     „É¶„Éº„Ç∂„Éº: ${realUsers.length}‰ª∂`);
    console.log(`     ÂïÜÂìÅ: ${realProducts.length}‰ª∂`);
    console.log(`     Á¥çÂìÅ„Éó„É©„É≥: ${realPlans.length}‰ª∂`);
    console.log(`   ÂâäÈô§„Åô„Åπ„Åç„Éá„É¢„Éá„Éº„Çø:`);
    console.log(`     „É¶„Éº„Ç∂„Éº: ${demoUsers.length}‰ª∂`);
    console.log(`     ÂïÜÂìÅ: ${allProducts.length - realProducts.length}‰ª∂`);
    console.log(`     Á¥çÂìÅ„Éó„É©„É≥: ${allPlans.length - realPlans.length}‰ª∂`);

    return {
      demoUserIds: demoUsers.map(u => u.id),
      realUserIds,
      demoProductCount: allProducts.length - realProducts.length,
      realProductCount: realProducts.length
    };

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

identifyRealUserData();