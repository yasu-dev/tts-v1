---
description: Rules and guidelines for database design, implementation, and management practices to ensure consistent and maintainable data architecture across the project.
globs:
alwaysApply: false
 

# データベース設計ルール

## 概要

現行: SQLite を使用し、Prisma ORM でデータベースを管理します。
将来計画（非拘束）: マネージド DB への移行可否は ADR で検討・決定します。

## スキーマ設計の基本ルール

### 1. モデル命名規則

- 単数形のパスカルケースを使用（例：`User`, `Project`）
- テーブル名は複数形のスネークケース（Prisma が自動変換）
- モデル名は明確で具体的な名詞を使用

### 2. フィールド命名規則

- キャメルケースを使用（例：`firstName`, `createdAt`）
- 主キーは`id`を使用
- 外部キーは`[参照テーブル名]Id`の形式
- タイムスタンプは`createdAt`と`updatedAt`を使用

### 3. データ型の使用

- 文字列: `String`
- 数値: `Int`, `Float`
- 真偽値: `Boolean`
- 日時: `DateTime`
- 配列: `String[]`, `Int[]`など
- JSON: `Json`
- 列挙型: `Enum`

### 4. リレーション設計

- 1 対多: `@relation`を使用
- 多対多: 中間テーブルを使用
- 1 対 1: `@relation`と`@unique`を使用
- カスケード削除: `onDelete: Cascade`を適切に設定

### 5. インデックス設計

- 検索頻度の高いフィールドにインデックスを設定
- 外部キーには必ずインデックスを設定
- 複合インデックスは検索パターンに基づいて設定
- ユニーク制約が必要な場合は`@unique`を使用

### 6. バリデーション

- 必須フィールドは`?`を付けない
- オプショナルフィールドは`?`を付ける
- 文字列の長さ制限は`@db.VarChar(n)`を使用
- 数値の範囲制限は`@db.Int`や`@db.Float`を使用

### 7. マイグレーション管理

- マイグレーションファイルは`prisma/migrations`に保存
- マイグレーション名は変更内容を明確に
- スキーマ変更は必ずマイグレーションを通じて行う
- 本番環境への適用前にテスト環境で検証

### 8. セキュリティ考慮事項

- 機密情報は暗号化して保存
- ユーザー認証情報は安全に管理
- アクセス権限の適切な設定
- 入力値のバリデーション

### 9. パフォーマンス最適化（重要）

- 適切なインデックス設定
- N+1 問題の回避
- クエリの最適化
- キャッシュ戦略の検討

### 10. ドキュメント化

- スキーマの変更履歴を記録
- 複雑なリレーションの説明
- インデックスの使用理由
- マイグレーション手順

## 開発フロー

1. スキーマ設計

   - 要件の整理
   - モデル設計
   - リレーション設計
   - インデックス設計

2. 実装

   - マイグレーションファイルの作成
   - テストデータの準備
   - アプリケーションコードの実装

3. テスト

   - マイグレーションのテスト
   - パフォーマンステスト
   - セキュリティテスト

4. デプロイ
   - バックアップの作成
   - マイグレーションの実行
   - 動作確認

## メンテナンス

1. 定期的なレビュー

   - スキーマの最適化
   - インデックスの見直し
   - パフォーマンスの確認

2. バックアップ

   - 定期バックアップの実施
   - リストア手順の整備
   - バックアップの検証

3. モニタリング
   - クエリパフォーマンスの監視
   - エラーログの確認
   - リソース使用状況の確認
